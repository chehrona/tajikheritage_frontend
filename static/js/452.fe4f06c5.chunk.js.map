{"version":3,"file":"static/js/452.fe4f06c5.chunk.js","mappings":"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","sources":["errorPages/pageNotFound/pageNotFoundStyles.ts","errorPages/pageNotFound/PageNotFound.tsx","hooks/useSetHeader.tsx","services/storeVisit.ts","services/request.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MainContainer = styled.div`\n    width: 100%;\n    height: calc(100svh - var(--header-height));\n    background-image: url('/customAssets/error-grid-1.png');\n    background-size: calc(100vw / 4);\n    background-repeat: repeat;\n    background-position: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    @media (max-width: 480px) {\n        background-size: calc(100vw / 3);\n    }\n`;\n\nexport const CodeWrapper = styled.div`\n    height: 15rem;\n    width: 25rem;\n    border-radius: var(--small-radius);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: var(--regular-black-color);\n    box-shadow: var(--primary-box-shadow) var(--primary-white-color);\n\n    @media (max-width: 480px) {\n        height: 10rem;\n        width: 20rem;\n    }\n`;\n\nexport const Code = styled.div`\n    font-size: 5rem;\n    font-family: var(--blocky-font);\n    color: var(--primary-red-color);\n\n    @media (max-width: 480px) {\n        font-size: var(--header-large);\n    }\n`;\n\nexport const ErrorMessage = styled.div`\n    font-size: 1.5rem;\n    font-family: var(--fancy-font);\n    color: var(--primary-white-color);\n\n    @media (max-width: 480px) {\n        font-size: var(--header-normal);\n    }\n`;\n","import React from 'react';\n\n// Hooks\nimport { useGlobalData } from '../../hooks/useGlobalData';\nimport { useSetHeader } from '../../hooks/useSetHeader';\n\n// Helper\nimport alertMessages from '../../miscellaneous/alertMessages.json';\n\n// Components\nimport AppLayout from '../../AppLayout';\n\n// Styled components\nimport {\n    MainContainer,\n    CodeWrapper,\n    Code,\n    ErrorMessage,\n} from './pageNotFoundStyles';\n\nconst PageNotFound: React.FC = () => {\n    const { lang } = useGlobalData();\n\n    useSetHeader('reset');\n\n    return (\n        <AppLayout>\n            <MainContainer>\n                <CodeWrapper>\n                    <Code>404</Code>\n                    <ErrorMessage>\n                        {alertMessages.PAGE_NOT_FOUND[lang]}\n                    </ErrorMessage>\n                </CodeWrapper>\n            </MainContainer>\n        </AppLayout>\n    );\n};\n\nexport default PageNotFound;\n","import React, { useEffect } from 'react';\n\n// Hooks\nimport { useGlobalData } from './useGlobalData';\n\n// Services\nimport { requestPage } from '../services/request';\n\n// Helper\nimport staticTexts from '../miscellaneous/staticTexts.json';\n\n// Types\nimport { Langs } from '../appTypes';\nimport { HeaderDataType, Section, TitleProps } from './hookTypes';\n\nexport const useSetHeader = (page: string, type?: string, pageData?: any) => {\n    const { title, setTitle } = useGlobalData();\n\n    const modifiedPage =\n        type === 'landing' ? page : page.substring(0, page.indexOf('/'));\n\n    const link =\n        type === 'middle'\n            ? page.substring(page.indexOf('_') + 1)\n            : page.substring(page.indexOf('/') + 1, page.length - 1);\n\n    useEffect(() => {\n        const fetchHeaderData = async () => {\n            try {\n                const headerData = await requestPage(modifiedPage);\n\n                let tempHeader = { ...title };\n\n                if (type === 'landing') {\n                    updateLandingPageTitle(tempHeader, headerData);\n                } else {\n                    updatePageTitle(tempHeader, headerData);\n                }\n\n                setTitle(tempHeader);\n            } catch (error: unknown) {\n                setTitle(staticTexts.HEADER);\n            }\n        };\n\n        if (page === 'reset') {\n            setTitle(staticTexts.HEADER);\n        } else {\n            fetchHeaderData();\n        }\n    }, [page, pageData]);\n\n    const updateLandingPageTitle = (\n        tempHeader: TitleProps,\n        headerData: HeaderDataType,\n    ) => {\n        const { header } = headerData;\n\n        for (const key in title) {\n            const typedKey = key as Langs;\n            let titleArr = [...title[typedKey]];\n\n            // New title\n            const newItem = [`${header[typedKey].toUpperCase()}`, ''];\n\n            titleArr[1] = newItem;\n\n            tempHeader[typedKey] = titleArr;\n        }\n    };\n\n    const updatePageTitle = (\n        tempHeader: TitleProps,\n        headerData: HeaderDataType,\n    ) => {\n        const { header, sections } = headerData;\n\n        sections?.forEach((section: Section) => {\n            const { link: sectionLink, cardTitle: sectionTitle } = section;\n\n            if (sectionLink === link) {\n                for (const key in title) {\n                    const typedKey = key as Langs;\n\n                    let titleArr = [...title[typedKey]];\n                    let newItem = [];\n\n                    if (type === 'middle') {\n                        newItem = [\n                            `${header[typedKey].toUpperCase()}`,\n                            `${\n                                sectionTitle[typedKey] !== undefined\n                                    ? sectionTitle[typedKey]\n                                    : ''\n                            }`,\n                        ];\n                    } else {\n                        newItem = [\n                            `${sectionTitle[typedKey].toUpperCase()}`,\n                            `${\n                                pageData?.name[typedKey] !== undefined\n                                    ? pageData?.name[typedKey]\n                                    : ''\n                            }`,\n                        ];\n                    }\n\n                    titleArr[1] = newItem;\n                    tempHeader[typedKey] = titleArr;\n                }\n            }\n        });\n    };\n};\n","export const storeVisit = (page: string) => {\n    const hasVisitedBefore = localStorage.getItem('th_Id');\n    let storageValue = null;\n\n    if (!hasVisitedBefore) {\n        storageValue = page + '_' + Math.random().toString(36).substring(2, 9);\n        localStorage.setItem('th_Id', storageValue);\n    } else {\n        storageValue = localStorage.getItem('th_Id');\n    }\n\n    return storageValue;\n};\n","import axios from 'axios';\n\n// Helper\nimport { storeVisit } from './storeVisit';\nimport { ValidEmailType } from '../components/poet/bookDialog/types/componentTypes';\n\n// API URL\nconst apiUrl = process.env.REACT_APP_BASE_URL;\n\nexport const requestPage = async (page: string) => {\n    if (!page) page = '';\n\n    try {\n        const userId = storeVisit(page);\n\n        const response = await axios.get(`${apiUrl}/${page}`, {\n            params: { page, userId },\n        });\n\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const requestMiddlePage = async (page: string) => {\n    try {\n        const userId = storeVisit(page);\n\n        const response = await axios.get(`${apiUrl}/${page}`, {\n            params: { userId, page },\n        });\n\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const requestArticleInfo = async (id: string, page: string) => {\n    try {\n        const userId = storeVisit(`${page}${id}`);\n\n        const response = await axios.get(`${apiUrl}/${page}`, {\n            params: {\n                id: id,\n                page: `${page}/${id}`,\n                userId: userId,\n            },\n        });\n\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const requestPdf = async (source: string) => {\n    try {\n        const response = await axios.get(`${apiUrl + source}`, {\n            responseType: 'arraybuffer',\n        });\n        const blob = new Blob([response.data], {\n            type: 'application/pdf',\n        });\n        const pdfBlobUrl = URL.createObjectURL(blob);\n        return pdfBlobUrl;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const addEmail = async (info: ValidEmailType) => {\n    try {\n        const response = await axios.post(`${apiUrl}/email`, { info });\n\n        return response;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// export const sendLogin = async (info) => {\n//     try {\n//         const response = await axios.post(`${apiUrl}/admin/login`, { info });\n\n//         return response;\n//     } catch (error) {\n//         throw error;\n//     }\n// };\n\nexport const getSections = async () => {\n    try {\n        const response = await axios.get(`${apiUrl}/${'admin/content'}`);\n\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// export const uploadSectionImage = async (formData) => {\n//     try {\n//         const response = await axios.put(`${apiUrl}/admin/section`, formData, {\n//             headers: {\n//                 'Content-Type': 'multipart/form-data',\n//             },\n//         });\n\n//         return response;\n//     } catch (error) {\n//         throw error;\n//     }\n// };\n"],"names":["MainContainer","styled","div","CodeWrapper","Code","ErrorMessage","PageNotFound","lang","useGlobalData","useSetHeader","_jsx","AppLayout","children","_jsxs","alertMessages","PAGE_NOT_FOUND","page","type","pageData","title","setTitle","modifiedPage","substring","indexOf","link","length","useEffect","staticTexts","async","headerData","requestPage","tempHeader","updateLandingPageTitle","updatePageTitle","error","fetchHeaderData","header","key","typedKey","titleArr","newItem","toUpperCase","sections","forEach","section","sectionLink","cardTitle","sectionTitle","undefined","name","storeVisit","storageValue","localStorage","getItem","Math","random","toString","setItem","apiUrl","process","userId","axios","get","params","data","requestMiddlePage","requestArticleInfo","id","requestPdf","response","source","responseType","blob","Blob","URL","createObjectURL","addEmail","post","info"],"sourceRoot":""}