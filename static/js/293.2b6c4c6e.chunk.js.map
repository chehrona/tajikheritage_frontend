{"version":3,"file":"static/js/293.2b6c4c6e.chunk.js","mappings":"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","sources":["components/calendar/mulchar/pieChart/PieChart.tsx","components/calendar/mulchar/mulcharCalculator/mulcharCalculatorStyles.ts","components/calendar/mulchar/mulcharCalculator/MulcharCalculator.tsx","articlePages/calendar/mulcharPage/mulcharPageStyles.ts","articlePages/calendar/mulcharPage/MulcharPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Slice images\nimport staticData from '../../../../miscellaneous/history/calendarPage.json';\n\n// Types\nimport { PieChartProps } from './types/componentTypes';\n\n// Styles\nimport {\n    SvgContainer,\n    SliceGroup,\n    CenterImage,\n    SignTitle,\n} from './pieChartStyles';\n\nconst PieChart: React.FC<PieChartProps> = ({\n    signs,\n    setIndex,\n    setShowSignInfo,\n}) => {\n    const [size, setSize] = useState(window.innerHeight / 1.15);\n\n    useEffect(() => {\n        const updateSize = () => setSize(window.innerHeight / 1.15);\n        window.addEventListener('resize', updateSize);\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    const cx = size / 2;\n    const cy = size / 2;\n    const outerRadius = size / 2;\n    const innerRadius = outerRadius * 0.35;\n    const titleOuterRadius = outerRadius * 0.9;\n    const titleInnerRadius = titleOuterRadius - 1;\n\n    const toRadians = (deg: number) => (deg * Math.PI) / 180;\n\n    const describeArc = (\n        startAngle: number,\n        endAngle: number,\n        radius = outerRadius,\n    ) => {\n        const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n\n        const x1 = cx + radius * Math.cos(toRadians(startAngle));\n        const y1 = cy + radius * Math.sin(toRadians(startAngle));\n\n        const x2 = cx + radius * Math.cos(toRadians(endAngle));\n        const y2 = cy + radius * Math.sin(toRadians(endAngle));\n\n        return { x1, y1, x2, y2, largeArcFlag };\n    };\n\n    const buildArcPath = (\n        startAngle: number,\n        endAngle: number,\n        outerR: number,\n        innerR: number,\n    ) => {\n        const { x1, y1, x2, y2, largeArcFlag } = describeArc(\n            startAngle,\n            endAngle,\n            outerR,\n        );\n        const {\n            x1: x4,\n            y1: y4,\n            x2: x3,\n            y2: y3,\n        } = describeArc(startAngle, endAngle, innerR);\n\n        return [\n            `M ${x1} ${y1}`,\n            `A ${outerR} ${outerR} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n            `L ${x3} ${y3}`,\n            `A ${innerR} ${innerR} 0 ${largeArcFlag} 0 ${x4} ${y4}`,\n            'Z',\n        ].join(' ');\n    };\n\n    const sliceAngle = 30;\n    const gapAngle = 0.25;\n\n    const handleClick = (i: number) => {\n        setIndex(i);\n        setShowSignInfo(true);\n    };\n\n    return (\n        <SvgContainer viewBox={`0 0 ${size} ${size}`} $size={size}>\n            <CenterImage\n                href={`${process.env.PUBLIC_URL}/customAssets/calendar/mÅ«ljar.png`}\n                x={cx - innerRadius}\n                y={cy - innerRadius}\n                width={innerRadius * 2}\n                height={innerRadius * 2}\n                transform={`rotate(90, ${cx}, ${cy})`}\n            />\n            <defs>\n                {signs.map((sign, i) => {\n                    const borderStartAngle = i * sliceAngle;\n                    const borderEndAngle = (i + 1) * sliceAngle;\n                    const fillStartAngle = borderStartAngle + gapAngle / 2;\n                    const fillEndAngle = borderEndAngle - gapAngle / 2;\n                    const clipPathId = `clip-${i}`;\n                    return (\n                        <clipPath id={clipPathId} key={clipPathId}>\n                            <path\n                                d={buildArcPath(\n                                    fillStartAngle,\n                                    fillEndAngle,\n                                    outerRadius,\n                                    innerRadius,\n                                )}\n                            />\n                        </clipPath>\n                    );\n                })}\n            </defs>\n\n            {staticData.MULCHAR_CHART_IMGS.map((image, i) => {\n                const borderStartAngle = i * sliceAngle;\n                const borderEndAngle = (i + 1) * sliceAngle;\n                const fillStartAngle = borderStartAngle + gapAngle / 2;\n                const fillEndAngle = borderEndAngle - gapAngle / 2;\n\n                const midAngle = (fillStartAngle + fillEndAngle) / 2;\n                const midAngleRad = toRadians(midAngle);\n\n                const hoverDistance = 15;\n                const translateX = hoverDistance * Math.cos(midAngleRad);\n                const translateY = hoverDistance * Math.sin(midAngleRad);\n\n                const imageSize = size / 6.5;\n                const midRadius = (innerRadius + outerRadius) / 2.05;\n\n                const centerX = cx + midRadius * Math.cos(midAngleRad);\n                const centerY = cy + midRadius * Math.sin(midAngleRad);\n\n                const x = centerX - imageSize / 2;\n                const y = centerY - imageSize / 1.5;\n\n                // Icons\n                const iconSize = size / 21;\n                const iconCenterX =\n                    cx + (midRadius / 1.575) * Math.cos(midAngleRad);\n                const iconCenterY =\n                    cy + (midRadius / 1.575) * Math.sin(midAngleRad);\n\n                const iconX = iconCenterX - iconSize / 2;\n                const iconY = iconCenterY - iconSize / 3;\n\n                // Text\n                const textRadius = outerRadius - 17;\n                const startX =\n                    cx + textRadius * Math.cos(toRadians(borderStartAngle));\n                const startY =\n                    cy + textRadius * Math.sin(toRadians(borderStartAngle));\n                const endX =\n                    cx + textRadius * Math.cos(toRadians(borderEndAngle));\n                const endY =\n                    cy + textRadius * Math.sin(toRadians(borderEndAngle));\n\n                const pathId = `textPath-${i}`;\n\n                return (\n                    <SliceGroup\n                        key={i}\n                        onClick={() => handleClick(i)}\n                        x={translateX}\n                        y={translateY}\n                        cx={cx}\n                        cy={cy}\n                    >\n                        <path\n                            d={buildArcPath(\n                                borderStartAngle,\n                                borderEndAngle,\n                                outerRadius,\n                                innerRadius,\n                            )}\n                            fill=\"var(--primary-gold-color)\"\n                        />\n                        <path\n                            d={buildArcPath(\n                                fillStartAngle,\n                                fillEndAngle,\n                                titleInnerRadius,\n                                innerRadius,\n                            )}\n                            fill=\"var(--primary-black-color)\"\n                        />\n                        <path\n                            d={buildArcPath(\n                                fillStartAngle,\n                                fillEndAngle,\n                                titleOuterRadius,\n                                outerRadius,\n                            )}\n                            fill=\"var(--primary-black-color)\"\n                        />\n                        <image\n                            href={\n                                process.env.REACT_APP_BASE_URL + image.img.src\n                            }\n                            x={x}\n                            y={y}\n                            width={imageSize}\n                            height={imageSize}\n                            transform={`rotate(${image.img.angle}, ${centerX}, ${centerY})`}\n                        />\n                        <defs>\n                            <path\n                                id={pathId}\n                                d={`\n                        M ${startX} ${startY} \n                        A ${textRadius} ${textRadius} 0 0 1 ${endX} ${endY}\n                    `}\n                                fill=\"none\"\n                            />\n                        </defs>\n                        <SignTitle\n                            fill=\"var(--primary-gold-color)\"\n                            textAnchor=\"middle\"\n                        >\n                            <textPath\n                                href={`#${pathId}`}\n                                startOffset=\"50%\"\n                                dominantBaseline=\"middle\"\n                            >\n                                {signs[i].info.title}\n                            </textPath>\n                        </SignTitle>\n                    </SliceGroup>\n                );\n            })}\n        </SvgContainer>\n    );\n};\n\nexport default PieChart;\n","import styled from 'styled-components';\nimport { Face } from '../../../poet/poetAwards/poetAwardStyles';\n\nexport const MainContainer = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    margin-top: var(--text-segment-gap);\n`;\n\nexport const InputWrapper = styled.div`\n    height: 3.5rem;\n    width: 20rem;\n    background: url('/customAssets/mulchar.svg') center no-repeat;\n    background-size: contain;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    margin-bottom: var(--text-segment-gap);\n\n    @media (max-width: 480px) {\n        /* width: 100%;\n        height: 3rem; */\n    }\n\n    @media screen and (min-device-width: 481px) and (max-device-width: 1024px) {\n        /* width: 35rem;\n        height: 4rem; */\n    }\n`;\n\nexport const InputField = styled.input`\n    outline: none;\n    border: none;\n    width: 12rem;\n    height: 3.4rem;\n    font-size: var(--header-small);\n    background-color: transparent;\n    font-family: var(--regular-font);\n`;\n\nexport const CardWrapper = styled.div`\n    width: 15rem;\n    height: 18rem;\n    display: flex;\n    justify-content: center;\n    align-items: start;\n    background-color: transparent;\n    perspective: 62.5rem;\n    border-radius: var(--small-radius);\n    box-shadow: var(--primary-box-shadow) var(--primary-shadow-color);\n    margin-top: var(--text-segment-gap);\n\n    @media (max-width: 480px) {\n        width: var(--small-card-width);\n        height: var(--small-card-height);\n    }\n`;\n\nexport const CardInnerContainer = styled.div<{ $flip: boolean }>`\n    position: relative;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    transform: ${({ $flip }) => ($flip ? 'rotateY(180deg)' : 'rotateY(0deg)')};\n    transition: transform 0.8s;\n    transform-style: preserve-3d;\n`;\n\nexport const CardFace = styled(Face)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    background-image: url(${'/customAssets/noise.png'});\n    background-color: var(--primary-black-color);\n    padding: var(--text-segment-gap);\n`;\n\nexport const CardTitle = styled.div`\n    width: 100%;\n    padding-bottom: var(--text-segment-gap);\n    font-size: var(--header-normal);\n    color: var(--primary-white-color);\n    font-weight: 500;\n`;\n\nexport const NoSignWrapper = styled.div`\n    font-size: 5rem;\n    color: var(--primary-white-color);\n`;\n\nexport const SignImage = styled.img`\n    width: 100%;\n    height: 100%;\n`;\n","import React, { ChangeEvent, useState } from 'react';\n\n// Hooks\nimport { useGlobalData } from '../../../../hooks/useGlobalData';\n\n// Static\nimport staticData from '../../../../miscellaneous/history/calendarPage.json';\n\n// Styles\nimport {\n    InputWrapper,\n    MainContainer,\n    InputField,\n    CardWrapper,\n    SignImage,\n    CardInnerContainer,\n    NoSignWrapper,\n    CardFace,\n    CardTitle,\n} from './mulcharCalculatorStyles';\n\n// Types\nimport { SignObj } from '../../../../articlePages/calendar/mulcharPage/types/componentTypes';\n\nconst MulcharCalculator: React.FC<{ signs: SignObj[] }> = ({ signs }) => {\n    const { lang } = useGlobalData();\n    const [year, setYear] = useState<string>('');\n    const [index, setIndex] = useState<number | null>(null);\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const inputYear = e.target.value;\n        if (!/^\\d{4}$/.test(inputYear)) {\n            setYear(inputYear);\n            setIndex(null);\n            return;\n        }\n        const yearIndex = (parseInt(inputYear) - 16) % 12;\n        setYear(inputYear);\n        setIndex(yearIndex);\n    };\n\n    return (\n        <MainContainer>\n            <InputWrapper>\n                <InputField\n                    name=\"muljar_year\"\n                    id=\"muljar_year\"\n                    value={year}\n                    onChange={handleChange}\n                    placeholder={staticData.MULCHAR_CALC_PLACEHOLDER[lang]}\n                />\n            </InputWrapper>\n            <CardWrapper>\n                <CardInnerContainer\n                    $flip={\n                        index !== null &&\n                        index >= 0 &&\n                        index < signs.length &&\n                        year.length > 0\n                    }\n                >\n                    <CardFace $back={true}>\n                        {index !== null &&\n                        index >= 0 &&\n                        index < signs.length &&\n                        year.length > 0 ? (\n                            <React.Fragment>\n                                <CardTitle>{signs[index].info.title}</CardTitle>\n                                <SignImage\n                                    src={`${process.env.REACT_APP_BASE_URL}${staticData.MULCHAR_CHART_IMGS[index]?.img?.src}`}\n                                    alt={signs[index]?.id}\n                                />\n                            </React.Fragment>\n                        ) : null}\n                    </CardFace>\n                    <CardFace $back={false}>\n                        <NoSignWrapper>?</NoSignWrapper>\n                    </CardFace>\n                </CardInnerContainer>\n            </CardWrapper>\n        </MainContainer>\n    );\n};\n\nexport default MulcharCalculator;\n","import styled from 'styled-components';\n\nexport const ExtrasContainer = styled.div`\n    position: relative;\n    height: 98svh;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    padding: var(--text-segment-gap) 0rem;\n`;\n\nexport const ChartContainer = styled.div`\n    transform: rotateZ(-90deg);\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n","import React, { useState, useEffect } from 'react';\n\n// Hooks\nimport { useMediaQuery } from 'react-responsive';\nimport { useLocation } from 'react-router-dom';\nimport { useGlobalData } from '../../../hooks/useGlobalData';\nimport { useSetHeader } from '../../../hooks/useSetHeader';\nimport { useToasts } from '../../../hooks/useToasts';\n\n// Types\nimport { ErrorResponse } from '../../../appTypes';\nimport { ArticleData } from './types/componentTypes';\n\n// Services\nimport { requestArticleInfo } from '../../../services/request';\n\n// Pages\nimport PageNotFound from '../../../errorPages/pageNotFound/PageNotFound';\n\n// Components\nimport AppLayout from '../../../AppLayout';\nimport TextSegment from '../../../components/common/articleTextSegment/TextSegment';\nimport Sources from '../../../components/common/sources/Sources';\nimport ArticlePageFirstContainer from '../../../components/common/pageWrapper/ArticlePageFirstContainer';\nimport PageInnerContainer from '../../../components/common/pageInnerContainer/PageInnerContainer';\nimport PieChart from '../../../components/calendar/mulchar/pieChart/PieChart';\nimport SignDialog from '../../../components/calendar/mulchar/signDialog/SignDialog';\nimport MulcharCalculator from '../../../components/calendar/mulchar/mulcharCalculator/MulcharCalculator';\n\n// Styles\nimport { ExtrasContainer, ChartContainer } from './mulcharPageStyles';\n\nconst MuljarPage: React.FC<{ page: string }> = ({ page }) => {\n    const { pathname } = useLocation();\n    const { showToast } = useToasts();\n    const { lang } = useGlobalData();\n    const [data, setData] = useState<ArticleData>();\n    const [error, setError] = useState<number | null>(null);\n    const [showSignInfo, setShowSignInfo] = useState(false);\n    const [index, setIndex] = useState<number>(0);\n    const isTablet = useMediaQuery({\n        query: `(min-device-width: 481px) and (max-device-width: 1024px)`,\n    });\n    const topLeftRad = isTablet ? 2.5 : 4;\n\n    const fetchData = async () => {\n        try {\n            const data = await requestArticleInfo('mÅ«ljar', page);\n            setData(data);\n        } catch (error: any) {\n            const customError = error as ErrorResponse;\n\n            if (customError.status === 404) {\n                setError(404);\n            } else if (customError.status === 500) {\n                showToast('E_500', 'error', page);\n            }\n        }\n    };\n\n    useSetHeader(page, 'generic', data);\n\n    useEffect(() => {\n        fetchData();\n    }, [pathname]);\n\n    return (\n        <React.Fragment>\n            {error === 404 ? <PageNotFound /> : null}\n            <AppLayout>\n                <ArticlePageFirstContainer>\n                    {data ? (\n                        <PageInnerContainer>\n                            {data.desc[lang].map((entry, i) => (\n                                <React.Fragment key={i}>\n                                    <TextSegment\n                                        i={i}\n                                        key={`${data?.name[lang]}_${i}`}\n                                        reverse={i % 2 > 0}\n                                        data={entry}\n                                        title={data.name[lang]}\n                                        topLeftRad={topLeftRad}\n                                    />\n                                    {entry.signs ? (\n                                        <ExtrasContainer>\n                                            <ChartContainer>\n                                                <PieChart\n                                                    signs={entry.signs}\n                                                    setIndex={setIndex}\n                                                    setShowSignInfo={\n                                                        setShowSignInfo\n                                                    }\n                                                />\n                                            </ChartContainer>\n                                            <SignDialog\n                                                signInfo={entry.signs[index]}\n                                                setShowSignInfo={\n                                                    setShowSignInfo\n                                                }\n                                                calendar={'MULCHAR_CHART_IMGS'}\n                                                showSignInfo={showSignInfo}\n                                                index={index}\n                                            />\n                                        </ExtrasContainer>\n                                    ) : null}\n                                    {entry.predict ? (\n                                        <MulcharCalculator\n                                            signs={data.desc[lang][1].signs}\n                                        />\n                                    ) : null}\n                                </React.Fragment>\n                            ))}\n                            <Sources data={data.references[lang]} />\n                        </PageInnerContainer>\n                    ) : null}\n                </ArticlePageFirstContainer>\n            </AppLayout>\n        </React.Fragment>\n    );\n};\n\nexport default MuljarPage;\n"],"names":["_ref","signs","setIndex","setShowSignInfo","size","setSize","useState","window","innerHeight","useEffect","updateSize","addEventListener","removeEventListener","cx","cy","outerRadius","innerRadius","titleOuterRadius","titleInnerRadius","toRadians","deg","Math","PI","describeArc","startAngle","endAngle","radius","arguments","length","undefined","largeArcFlag","x1","cos","y1","sin","x2","y2","buildArcPath","outerR","innerR","x4","y4","x3","y3","join","_jsxs","SvgContainer","viewBox","$size","children","_jsx","CenterImage","href","x","y","width","height","transform","map","sign","i","fillStartAngle","gapAngle","fillEndAngle","clipPathId","id","d","staticData","image","borderStartAngle","borderEndAngle","midAngleRad","translateX","translateY","imageSize","midRadius","centerX","centerY","iconSize","textRadius","startX","startY","endX","endY","pathId","SliceGroup","onClick","handleClick","fill","process","img","src","angle","SignTitle","textAnchor","startOffset","dominantBaseline","info","title","MainContainer","styled","div","InputWrapper","InputField","input","CardWrapper","CardInnerContainer","$flip","CardFace","Face","CardTitle","NoSignWrapper","SignImage","_staticData$MULCHAR_C","_staticData$MULCHAR_C2","_signs$index","lang","useGlobalData","year","setYear","index","name","value","onChange","e","inputYear","target","test","yearIndex","parseInt","placeholder","$back","React","alt","ExtrasContainer","ChartContainer","page","pathname","useLocation","showToast","useToasts","data","setData","error","setError","showSignInfo","topLeftRad","useMediaQuery","query","useSetHeader","async","requestArticleInfo","customError","status","fetchData","PageNotFound","AppLayout","ArticlePageFirstContainer","PageInnerContainer","desc","entry","TextSegment","reverse","PieChart","SignDialog","signInfo","calendar","predict","MulcharCalculator","Sources","references"],"sourceRoot":""}